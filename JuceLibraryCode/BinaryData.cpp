/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== export.png ==================
static const unsigned char temp_binary_data_0[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,8,6,0,0,0,141,137,29,13,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,253,73,68,65,84,56,79,197,148,61,106,2,81,20,133,191,179,3,155,172,34,77,32,27,208,94,176,74,32,182,182,22,166,17,173,
44,19,176,72,107,99,25,67,112,17,206,18,108,236,92,132,59,184,114,229,13,60,103,70,230,105,38,120,234,115,63,206,187,63,79,52,44,57,207,204,218,192,51,208,189,130,255,43,105,81,244,231,192,47,96,116,5,44,183,174,37,189,198,117,57,112,3,120,74,87,150,
0,126,0,30,131,239,12,90,4,102,146,58,117,192,208,34,15,81,74,218,20,208,193,99,73,243,38,129,167,215,253,59,112,7,12,235,122,24,6,56,43,248,42,19,38,176,46,90,238,7,244,189,92,135,92,47,209,190,22,163,38,37,60,0,29,73,219,112,162,79,128,239,95,171,226,
225,73,192,31,73,253,184,216,204,86,192,219,173,192,210,229,152,89,124,166,49,55,41,161,23,188,3,203,80,57,0,252,35,169,82,50,208,139,189,151,174,170,222,229,240,51,224,4,248,248,203,18,2,83,73,159,241,7,219,3,124,138,183,104,15,124,75,202,78,192,38,
117,4,45,135,135,21,125,56,192,148,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* export_png = (const char*) temp_binary_data_0;

//================== import.png ==================
static const unsigned char temp_binary_data_1[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,8,6,0,0,0,141,137,29,13,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,145,73,68,65,84,56,79,237,213,209,13,131,32,16,198,241,255,183,142,83,216,33,116,2,223,58,68,235,18,190,117,1,153,194,
53,28,160,107,156,185,164,109,76,132,6,98,251,6,47,64,32,63,46,199,17,196,171,153,89,7,204,239,121,162,191,0,45,208,72,234,99,123,180,3,239,192,45,19,244,125,33,134,158,1,253,236,3,122,22,60,160,191,0,29,29,36,61,124,80,10,94,37,77,223,242,92,10,62,129,
53,2,46,146,252,82,139,35,76,5,55,86,16,204,44,231,165,212,28,126,50,80,203,134,255,148,77,206,23,144,170,195,94,82,240,197,13,84,165,106,21,244,58,39,241,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* import_png = (const char*) temp_binary_data_1;

//================== load.png ==================
static const unsigned char temp_binary_data_2[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,8,6,0,0,0,141,137,29,13,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,125,73,68,65,84,56,79,237,148,177,13,128,48,12,4,207,155,48,10,83,176,0,18,59,33,177,1,116,12,193,4,153,199,200,169,17,
121,132,59,112,147,34,206,157,242,81,108,36,151,37,243,48,119,239,128,30,136,245,170,138,153,173,170,56,128,51,48,53,14,12,42,52,128,46,218,37,232,19,96,203,91,128,45,19,24,194,146,13,172,175,172,102,216,186,114,221,255,129,82,76,183,77,31,205,112,1,
198,247,233,85,194,174,140,47,213,21,127,249,200,31,176,170,94,237,59,1,166,54,71,7,50,195,43,207,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* load_png = (const char*) temp_binary_data_2;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x0c7cfb1e:  numBytes = 323; return export_png;
        case 0x7eb1fa8f:  numBytes = 215; return import_png;
        case 0x6e06c350:  numBytes = 195; return load_png;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "export_png",
    "import_png",
    "load_png"
};

const char* originalFilenames[] =
{
    "export.png",
    "import.png",
    "load.png"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
